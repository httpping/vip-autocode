package ${package.ServiceImpl};

import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${superServiceImplClassPackage};
import org.springframework.stereotype.Service;
import com.baomidou.mybatisplus.plugins.Page;
import java.util.List;
import com.baomidou.mybatisplus.mapper.Condition;
import com.baomidou.mybatisplus.mapper.EntityWrapper;

/**
 * $!{table.comment} 服务类
 *
 * @author dean
 * @version 1.0.0
 * @date 2019/03/16 10:03
 * @since 1.0.0
 */
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>(), ${table.serviceName} {

}
#else
public class ${table.serviceImplName} #*extends ${superServiceImplClass} <${table.mapperName}, ${entity}>*# implements ${table.serviceName} {

        @Resource
        ${entity}Mapper mapper;

        /**
        * 添加方法
        * @return
        */
        @Override
        public int  add(${entity} model){
            int back=mapper.save(model);
            return back;
        }
     #*   /**
        * 删除
        * @return
        */
        @Override
        public ${entity}  delete(${entity} model){
            boolean back=this.deleteById(model.getId());
            return model;
        }*#
        /**
        * 修改方法
        * @return
        */
        @Override
        public int  update(${entity} model){
            int back=mapper.update(model);
            return back;
        }
        /**
        * 单个查询
        * @return
        */
        @Override
        public List<${entity}> query(${entity} model){
            HashMap<String,Object> params = new HashMap<>();
            params.put("id",0);
            List<${entity}> results = mapper.list(params);
            return results;
        }

 #*       /**
        * 条件查询分页列表
        * @param pageParam
        * @return
        */*#
       #* @Override
        public Page page(${entity} pageParam){
            EntityWrapper condition =  new EntityWrapper();
            Page page = new Page<${entity}>(0, 20);
            List<${entity}> tbStrings = baseMapper.selectPage(page,condition);
            page.setRecords(tbStrings);
            return page;
        }*#

}
#end
